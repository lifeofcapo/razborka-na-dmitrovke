//docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders       Order[]
  testimonials Testimonial[]

  @@map("users")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  excerpt     String?
  slug        String   @unique
  image       String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts")
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  email     String?
  rating    Int      // 1-5 stars
  comment   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model CarBrand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  models   CarModel[]
  products Product[]

  @@map("car_brands")
}

model CarModel {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  carBrandId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  carBrand    CarBrand      @relation(fields: [carBrandId], references: [id], onDelete: Cascade)
  generations CarGeneration[]
  products    Product[]

  @@unique([carBrandId, slug])
  @@map("car_models")
}

model CarGeneration {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  yearFrom   Int?
  yearTo     Int?
  carModelId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  carModel CarModel  @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([carModelId, slug])
  @@map("car_generations")
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  description     String?
  shortDescription String?
  partNumber      String?  @unique
  price           Decimal  @db.Decimal(10, 2)
  originalPrice   Decimal? @db.Decimal(10, 2)
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(0)
  images          String[] // Array of image URLs
  weight          Float?
  dimensions      String?
  condition       ProductCondition @default(USED)
  warranty        Int?     // warranty in months
  categoryId      Int
  carBrandId      Int?
  carModelId      Int?
  carGenerationId Int?
  engineVolume    String?
  fuelType        FuelType?
  bodyType        BodyType?
  yearFrom        Int?
  yearTo          Int?
  featured        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  carBrand      CarBrand?      @relation(fields: [carBrandId], references: [id])
  carModel      CarModel?      @relation(fields: [carModelId], references: [id])
  carGeneration CarGeneration? @relation(fields: [carGenerationId], references: [id])
  orderItems    OrderItem[]

  @@map("products")
}


model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        Int?
  customerName  String
  customerEmail String?
  customerPhone String?
  status        OrderStatus @default(PROCESSING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   String
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum ProductCondition {
  NEW
  USED
  REFURBISHED
}

enum FuelType {
  PETROL
  DIESEL
  HYBRID
  ELECTRIC
  GAS
}

enum BodyType {
  SEDAN
  WAGON
  HATCHBACK_5D
  HATCHBACK_3D
  COUPE
  CONVERTIBLE
  SUV
  SUV_3D
  SUV_5D
  PICKUP
  VAN
  MINIVAN
  MICROBUS
  LIFTBACK
  TRUCK
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  CASH
  INVOICE
  QR_CODE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}