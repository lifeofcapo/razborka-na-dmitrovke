//docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders       Order[]
  testimonials Testimonial[]

  @@map("users")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  excerpt     String?
  slug        String   @unique
  image       String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts")
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  email     String?
  rating    Int      // 1-5 stars
  comment   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}

model PartCategory {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  parentId  Int?     
  parent    PartCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  PartCategory[] @relation("CategoryHierarchy")
  
  parts     CarPart[]
  products  Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("part_categories")
}

model CarPart {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  description String?
  category    PartCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  
  products    Product[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@map("car_parts")
}

model CarBrand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  models   CarModel[]
  products Product[]

  @@map("car_brands")
}

model CarModel {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  carBrandId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  carBrand    CarBrand      @relation(fields: [carBrandId], references: [id], onDelete: Cascade)
  generations CarGeneration[]
  products    Product[]

  @@unique([carBrandId, slug])
  @@map("car_models")
}

model CarGeneration {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  yearFrom   Int?
  yearTo     Int?
  carModelId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  carModel CarModel  @relation(fields: [carModelId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([carModelId, slug])
  @@map("car_generations")
}

model EngineVolume {
  id        Int      @id @default(autoincrement())
  value     String   @unique
  label     String   // Для отображения (например "1.6L")
  
  products  Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("engine_volumes")
}

model TransmissionType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  position  Int      @default(0) // Для сортировки в интерфейсе
  
  products  Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("transmission_types")
}

model FuelType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  
  products  Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("fuel_types")
}

model BodyType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  group     String?  // Для группировки (например "Легковые", "Грузовые")
  
  products  Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("body_types")
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  description     String?
  shortDescription String?

  partNumber      String?  @unique

  price           Decimal  @db.Decimal(10, 2)
  originalPrice   Decimal? @db.Decimal(10, 2)
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(0)
  images          String[] // Array of image URLs
  weight          Float?
  dimensions      String?
  condition       ProductCondition @default(USED)
  warranty        Int? 
  yearFrom        Int?
  yearTo          Int?
  featured        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt  

  partCategory   PartCategory?  @relation(fields: [categoryId], references: [id])
  categoryId      Int

  carPart        CarPart?          @relation(fields: [carPartId], references: [id])
  carPartId      Int?

  carBrand      CarBrand?      @relation(fields: [carBrandId], references: [id])
  carBrandId      Int?

  carModel      CarModel?      @relation(fields: [carModelId], references: [id])
  carModelId      Int?

  carGeneration CarGeneration? @relation(fields: [carGenerationId], references: [id])
  carGenerationId Int?

  engineVolume   EngineVolume?     @relation(fields: [engineVolumeId], references: [id])
  engineVolumeId Int?

  fuelType       FuelType?         @relation(fields: [fuelTypeId], references: [id])
  fuelTypeId     Int?

  bodyType       BodyType?         @relation(fields: [bodyTypeId], references: [id])
  bodyTypeId     Int?

  transmission   TransmissionType? @relation(fields: [transmissionId], references: [id])
  transmissionId Int?

  // Relations     
  orderItems    OrderItem[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        Int?
  customerName  String
  customerEmail String?
  customerPhone String?
  status        OrderStatus @default(PROCESSING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   String
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  CASH
  INVOICE
  QR_CODE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}